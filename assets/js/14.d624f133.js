(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{288:function(e,a,o){"use strict";o.r(a);var n=o(14),s=Object(n.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"componentes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#componentes"}},[e._v("#")]),e._v(" Compoñentes")]),e._v(" "),a("p",[e._v("Un compoñente é unha peza de software reutilizable. É dicir, consiste en programar algo\nque vai ser reutilizado noutros proxectos.")]),e._v(" "),a("p",[e._v("En terminoloxía Java, un compoñente software é unha clase creada para ser reutilizada.\nDefínese polo seu estado, que se almacena nun conxunto de propiedades, as cales poden\nser modificadas para adaptar o compoñente ao programa no que se insira, e un\ncomportamento, que se define polos eventos aos que responde e os métodos que\nexecuta ante ditos eventos.")]),e._v(" "),a("p",[e._v("Programar un compoñente dende cero é bastante complicado, pois hai que programar\ndende como se renderiza en pantalla ata como responde aos eventos, o que significa\nmoitas liñas de código. Realmente o que nós imos facer é coller como base un compoñente\nde Swing e estendelo a través do mecanismo de herdanza creando así un compoñente\npersonalizado.")]),e._v(" "),a("p",[e._v("Un subconxunto dos atributos e os métodos forman a interface do compoñente.\nOs compoñentes Swing utilizados ata agora nas interfaces gráficas elaboradas son\nelementos reutilizables que poden ser manexados por unha ferramenta de\ndesenvolvemento visual. Por exemplo, pode modificarse o seu tamaño e cor para adaptalo\ná interface e estes cambios permanecen almacenados no proxecto. Tamén teñen unha\ninterface formada por un conxunto de métodos e propiedades accesibles dende a paleta de\npropiedades. Ademais, teñen a capacidade de responder a eventos.")])])}),[],!1,null,null,null);a.default=s.exports}}]);